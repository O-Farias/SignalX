import requests
import os
import pandas as pd
from datetime import datetime, timedelta
import pytz

def fetch_market_data(symbol="MSFT", interval="5min"):
    """
    Busca dados de mercado da API Alpha Vantage e retorna como um DataFrame,
    ajustando os hor√°rios para o hor√°rio local do computador e verificando
    se os dados est√£o atualizados.

    Args:
        symbol (str): S√≠mbolo do ativo (ex.: "MSFT" para Microsoft).
        interval (str): Intervalo de tempo entre os dados (ex.: "5min").
    
    Returns:
        pd.DataFrame: Dados de mercado organizados como DataFrame.
    """
    api_key = os.getenv("API_KEY")
    url = f"https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol={symbol}&interval={interval}&apikey={api_key}"

    try:
        # Faz a requisi√ß√£o para a API
        print(f"üîó Enviando requisi√ß√£o para: {url}")
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()

        # Verifica se os dados est√£o dispon√≠veis
        if f"Time Series ({interval})" not in data:
            raise ValueError("‚ö†Ô∏è Dados n√£o dispon√≠veis ou limite de requisi√ß√µes excedido.")

        # Converte os dados para um DataFrame
        time_series = data[f"Time Series ({interval})"]
        df = pd.DataFrame.from_dict(time_series, orient="index", dtype=float)
        df.columns = ["open", "high", "low", "close", "volume"]

        # Ajusta os hor√°rios para datetime (UTC da API)
        df.index = pd.to_datetime(df.index).tz_localize("UTC")
        print(f"üïí Dados recebidos em UTC:\n{df.head()}")

        # Ajusta os hor√°rios para o hor√°rio local do computador
        local_tz = pytz.timezone("America/Sao_Paulo")  # Fuso hor√°rio de Bras√≠lia
        df.index = df.index.tz_convert(local_tz)
        print(f"üïí Dados ajustados para o hor√°rio local ({local_tz}):\n{df.head()}")

        # Remove informa√ß√µes de fuso (opcional)
        df.index = df.index.tz_localize(None)

        # Ordena os dados em ordem cronol√≥gica
        df = df.sort_index()

        # Verifica se o hor√°rio do √∫ltimo dado √© recente
        last_data_time = df.index[-1]  # Hor√°rio do √∫ltimo dado
        current_time = datetime.now()  # Hor√°rio atual do sistema

        # Define um limite de 15 minutos para os dados estarem atualizados
        if current_time - last_data_time > timedelta(minutes=15):
            print(f"‚ö†Ô∏è Os dados est√£o desatualizados! √öltimo dado: {last_data_time}")
            return None  # Retorna None se os dados estiverem desatualizados
        else:
            print(f"‚úÖ Dados atualizados! √öltimo dado: {last_data_time}")

        return df
    except requests.exceptions.RequestException as req_err:
        print(f"‚ùå Erro na requisi√ß√£o: {req_err}")
    except ValueError as val_err:
        print(f"‚ö†Ô∏è Erro nos dados recebidos: {val_err}")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")

    return None
